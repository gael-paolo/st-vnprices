import streamlit as st
import hashlib
import json
import os
from datetime import datetime, timedelta
import pandas as pd
import time
from io import BytesIO
import shutil
import gcsfs
from google.oauth2 import service_account
import traceback

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema de Precios de Veh√≠culos",
    page_icon="üöó",
    layout="wide"
)

# Configuraci√≥n de GCP y rutas de archivo en el bucket
GCS_BUCKET = "bk_vn"
GCS_PATH = "nissan/prices"
USERS_FILE = f"{GCS_BUCKET}/{GCS_PATH}/users.json"
SESSIONS_FILE = f"{GCS_BUCKET}/{GCS_PATH}/sessions.json"
PRODUCTS_FILE = f"{GCS_BUCKET}/{GCS_PATH}/products.csv"
PRODUCTS_HISTORICAL_PATH = f"{GCS_BUCKET}/{GCS_PATH}/historical/"

# Variable global para el filesystem
fs = None

# L√≥gica para inicializar el cliente de GCS
def initialize_gcs():
    """Inicializa el cliente de GCS con manejo de errores"""
    global fs
    try:
        st.write("üîç Iniciando inicializaci√≥n de GCS...")
        
        # Verificar si existen los secrets
        if not hasattr(st, 'secrets') or not st.secrets:
            st.error("No se encontraron secrets configurados en Streamlit")
            return False
        
        st.write("‚úÖ Secrets encontrados")
        
        # Obtener las credenciales del formato TOML de Streamlit
        if 'gcp_service_account' in st.secrets:
            service_account_info = dict(st.secrets["gcp_service_account"])
            st.write("‚úÖ Secci√≥n gcp_service_account encontrada en secrets")
            
            # Debug: mostrar informaci√≥n de las credenciales (sin datos sensibles)
            st.write(f"üìã Project ID: {service_account_info.get('project_id', 'No encontrado')}")
            st.write(f"üìß Client Email: {service_account_info.get('client_email', 'No encontrado')}")
            st.write(f"üîë Private Key ID: {service_account_info.get('private_key_id', 'No encontrado')}")
            
            # Asegurarse de que la private_key tenga el formato correcto
            if 'private_key' in service_account_info:
                private_key = service_account_info['private_key']
                st.write(f"üìè Longitud de private_key: {len(private_key)} caracteres")
                
                # Verificar formato de la private key
                if 'BEGIN PRIVATE KEY' in private_key and 'END PRIVATE KEY' in private_key:
                    st.write("‚úÖ Formato de private_key parece correcto")
                    service_account_info['private_key'] = private_key.replace('\\n', '\n')
                else:
                    st.error("‚ùå Formato de private_key incorrecto")
                    return False
            
            # Crear credenciales
            try:
                credentials = service_account.Credentials.from_service_account_info(service_account_info)
                st.write("‚úÖ Credenciales de servicio creadas")
            except Exception as cred_error:
                st.error(f"‚ùå Error al crear credenciales: {cred_error}")
                return False
            
            # Inicializar filesystem con diferentes m√©todos
            try:
                # M√©todo 1: Con token expl√≠cito
                fs = gcsfs.GCSFileSystem(
                    project=service_account_info['project_id'], 
                    token=credentials
                )
                st.write("‚úÖ Filesystem inicializado con token")
            except Exception as fs_error:
                st.error(f"‚ùå Error con m√©todo 1: {fs_error}")
                
                # M√©todo 2: Solo con project_id (usar√° las credenciales por defecto)
                try:
                    fs = gcsfs.GCSFileSystem(project=service_account_info['project_id'])
                    st.write("‚úÖ Filesystem inicializado solo con project_id")
                except Exception as fs_error2:
                    st.error(f"‚ùå Error con m√©todo 2: {fs_error2}")
                    return False
            
            # Test simple de conexi√≥n
            try:
                st.write("üîç Probando conexi√≥n con GCS...")
                # Listar buckets para verificar conexi√≥n
                buckets = fs.ls('')
                st.write(f"‚úÖ Conexi√≥n exitosa. Buckets disponibles: {len(buckets)}")
                
                # Verificar acceso al bucket espec√≠fico
                if GCS_BUCKET in buckets:
                    st.write(f"‚úÖ Bucket '{GCS_BUCKET}' encontrado")
                    return True
                else:
                    st.error(f"‚ùå Bucket '{GCS_BUCKET}' no encontrado")
                    st.write(f"Buckets disponibles: {buckets}")
                    return False
                    
            except Exception as test_error:
                st.error(f"‚ùå Error al conectar con GCS: {test_error}")
                st.write("üìã Traceback completo:")
                st.code(traceback.format_exc())
                return False
                
        else:
            st.error("No se encontr√≥ la secci√≥n 'gcp_service_account' en los secrets")
            st.write("Secrets disponibles:", list(st.secrets.keys()))
            return False
            
    except Exception as e:
        st.error(f"‚ùå Error general al inicializar GCS: {e}")
        st.write("üìã Traceback completo:")
        st.code(traceback.format_exc())
        return False

# Mostrar p√°gina de debug inicial
st.title("üîß Debug de Conexi√≥n GCS")
st.markdown("---")

# Inicializar GCS
if 'gcs_initialized' not in st.session_state:
    if initialize_gcs():
        st.session_state.gcs_initialized = True
        st.success("üéâ GCS inicializado correctamente!")
    else:
        st.error("‚ùå No se pudo inicializar GCS")
        st.stop()
else:
    st.success("‚úÖ GCS ya estaba inicializado")

st.markdown("---")
st.subheader("üìã Informaci√≥n de Configuraci√≥n")

# Mostrar informaci√≥n de configuraci√≥n
st.write(f"**Bucket:** {GCS_BUCKET}")
st.write(f"**Path:** {GCS_PATH}")
st.write(f"**Archivo de usuarios:** {USERS_FILE}")

# Probamos operaciones b√°sicas
st.markdown("---")
st.subheader("üß™ Pruebas de Operaciones")

if st.button("Probar operaciones GCS"):
    try:
        # Verificar si existe el bucket
        exists = fs.exists(GCS_BUCKET)
        st.write(f"‚úÖ Bucket existe: {exists}")
        
        if exists:
            # Listar contenido del bucket
            contenido = fs.ls(GCS_BUCKET)
            st.write(f"üìÅ Contenido del bucket: {contenido}")
            
            # Verificar si existe el directorio
            dir_exists = fs.exists(f"{GCS_BUCKET}/{GCS_PATH}")
            st.write(f"üìÅ Directorio existe: {dir_exists}")
            
    except Exception as e:
        st.error(f"‚ùå Error en operaciones: {e}")
        st.code(traceback.format_exc())

st.markdown("---")
st.subheader("üîß Soluci√≥n de Problemas")

st.write("""
**Posibles soluciones para error 401:**

1. **Verificar permisos del Service Account:**
   - Aseg√∫rate de que el service account tenga permisos de **Storage Admin** o **Storage Object Admin**
   - Verifica que el bucket exista y el SA tenga acceso

2. **Formato de las credenciales:**
   - La private key debe tener saltos de l√≠nea correctos (`\\n` ‚Üí `\n`)
   - Verifica que todos los campos est√©n completos en los secrets

3. **Probar con acceso p√∫blico temporal:**
   - Da acceso p√∫blico al bucket temporalmente para testing
""")

# Solo continuar con la app si GCS est√° funcionando
if st.session_state.gcs_initialized:
    st.success("‚úÖ Puedes continuar con la aplicaci√≥n principal")
    if st.button("Continuar a la aplicaci√≥n"):
        st.session_state.show_app = True
        st.rerun()

if st.session_state.get('show_app'):
    # Aqu√≠ ir√≠a el resto de tu aplicaci√≥n...
    st.title("üöó Sistema de Precios de Veh√≠culos")
    st.write("La aplicaci√≥n est√° funcionando correctamente")
else:
    st.info("üí° Resuelve los problemas de conexi√≥n antes de continuar")